Given a sorted array arr[] of size N, some elements of array are moved to either of the adjacent positions, i.e., arr[i] may be 
present at arr[i+1] or arr[i-1] i.e. arr[i] can only be swapped with either arr[i+1] or arr[i-1]. The task is to search for an
 element in this array.


Input: arr[] =  {10, 3, 40, 20, 50, 80, 70}, key = 40
Output: 2 
Explanation: Output is index of 40 in given array i.e. 2

Input: arr[] =  {10, 3, 40, 20, 50, 80, 70}, key = 90
Output: -1
Explanation: -1 is returned to indicate the element is not present


Soln: 
                                       0  1 2  3  4
Suppose we have this array int[] arr= {5,10,20,30,40} this can also be 
				      {5,10,30,20,40}  this is nearly sorted array


here is our modified Binary Search

int BS(int[] arr, int target){
	int low = 0;
	int N = arr.length;
	int high = N-1;

	while(low<=high){
		int mid = low + (high-low)/2;

		if(arr[mid]==target){
			return mid;
		}	
		if(mid-1>=0 && arr[mid-1]==target){
			return mid-1;
		}
		if(mid+1<=N-1 && arr[mid+1]==target){
			return mid+1;
		}

		else if(mid-2 >=0 && target<arr[mid] ){
			high = mid-2;
		}
		else{
			if(mid+2<=N-1){
				low=mid+2;
			}
		}		
	}

	return -1;
}