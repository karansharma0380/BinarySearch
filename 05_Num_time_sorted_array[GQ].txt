             0 1 2 3 4  5  6  7
int[] arr = {2,5,6,8,11,12,15,18} this is an array which rotated now

              0  1  2  3  4 5 6 7
int[] arr1 = {11,12,15,18,2,5,6,8}

You have find the num of time it is rotated.

Soln: Carefully observe that

		index of minimum ele = num of times the array is rotated

So we just need to find the index of the min element.
 
1. if   arr[mid-1]>arr[mid]<arr[mid+1]
2. Decide which half to move to.

int BS(int[] arr){
	if(arr.length==1){
		return 0;
	}
	
	int low = 0;
	int high = arr.length-1;
	int N = arr.length;

	while(low<=high){
		int mid = low + (high-low)/2;
		int prev = (mid+N-1)%N; // To make the array rotated
		int next = (mid+1)%N; // To make the array rotated

		if(arr[mid]<=arr[prev] && arr[mid]<=arr[next]){
			return mid;
		}
		
		if(arr[0]<=arr[mid]){ // means  this part is sorted and our answer lies in the un sorted part
			low=mid+1;
		}

		else{
			high=mid-1;
		}

				
	}

	return -1;
}

	