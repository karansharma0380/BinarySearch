This problem is based on Binary Search on Ans:

Ques: A peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the 
index to any of the peaks.

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.

Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.

Soln:

int BS(int[] arr){
	int low=0;
	int N= arr.length;
	int high=N - 1;

	while(low<=high){
		int mid = low + (high-low)/2;

		if(mid>0 && mid<N-1){ // Ignoring the first and last elements
			if(arr[mid]>arr[mid-1] && arr[mid]>arr[mid+1]){ // mid element is grer then both the neighbors
				return mid;
			}
	

			else if(arr[mid-1]> arr[mid]){
				high=mid-1;
			}
			else{
				low=mid+1;
			}
		}

		else if(mid==0){
			if(arr[0]>arr[1]){
				return 0;
			}
			else{
				return 1;
			}
		}

		else{
			if(arr[N-1]>arr[size-2]){
				return N-1;
			}
			else{
				return N-2;
			}
		}
	}

	return -1;
}